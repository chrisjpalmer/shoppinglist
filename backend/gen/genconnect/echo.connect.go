// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: echo.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/chrisjpalmer/shoppinglist/backend/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ShoppingListServiceName is the fully-qualified name of the ShoppingListService service.
	ShoppingListServiceName = "ShoppingListService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ShoppingListServiceGetPlanProcedure is the fully-qualified name of the ShoppingListService's
	// GetPlan RPC.
	ShoppingListServiceGetPlanProcedure = "/ShoppingListService/GetPlan"
)

// ShoppingListServiceClient is a client for the ShoppingListService service.
type ShoppingListServiceClient interface {
	GetPlan(context.Context, *connect.Request[gen.GetPlanRequest]) (*connect.Response[gen.GetPlanResponse], error)
}

// NewShoppingListServiceClient constructs a client for the ShoppingListService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShoppingListServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ShoppingListServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	shoppingListServiceMethods := gen.File_echo_proto.Services().ByName("ShoppingListService").Methods()
	return &shoppingListServiceClient{
		getPlan: connect.NewClient[gen.GetPlanRequest, gen.GetPlanResponse](
			httpClient,
			baseURL+ShoppingListServiceGetPlanProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("GetPlan")),
			connect.WithClientOptions(opts...),
		),
	}
}

// shoppingListServiceClient implements ShoppingListServiceClient.
type shoppingListServiceClient struct {
	getPlan *connect.Client[gen.GetPlanRequest, gen.GetPlanResponse]
}

// GetPlan calls ShoppingListService.GetPlan.
func (c *shoppingListServiceClient) GetPlan(ctx context.Context, req *connect.Request[gen.GetPlanRequest]) (*connect.Response[gen.GetPlanResponse], error) {
	return c.getPlan.CallUnary(ctx, req)
}

// ShoppingListServiceHandler is an implementation of the ShoppingListService service.
type ShoppingListServiceHandler interface {
	GetPlan(context.Context, *connect.Request[gen.GetPlanRequest]) (*connect.Response[gen.GetPlanResponse], error)
}

// NewShoppingListServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShoppingListServiceHandler(svc ShoppingListServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	shoppingListServiceMethods := gen.File_echo_proto.Services().ByName("ShoppingListService").Methods()
	shoppingListServiceGetPlanHandler := connect.NewUnaryHandler(
		ShoppingListServiceGetPlanProcedure,
		svc.GetPlan,
		connect.WithSchema(shoppingListServiceMethods.ByName("GetPlan")),
		connect.WithHandlerOptions(opts...),
	)
	return "/ShoppingListService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShoppingListServiceGetPlanProcedure:
			shoppingListServiceGetPlanHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShoppingListServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShoppingListServiceHandler struct{}

func (UnimplementedShoppingListServiceHandler) GetPlan(context.Context, *connect.Request[gen.GetPlanRequest]) (*connect.Response[gen.GetPlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.GetPlan is not implemented"))
}
