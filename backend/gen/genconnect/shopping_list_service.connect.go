// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: shopping_list_service.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "github.com/chrisjpalmer/shoppinglist/backend/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ShoppingListServiceName is the fully-qualified name of the ShoppingListService service.
	ShoppingListServiceName = "ShoppingListService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ShoppingListServiceGetCurrentPlanProcedure is the fully-qualified name of the
	// ShoppingListService's GetCurrentPlan RPC.
	ShoppingListServiceGetCurrentPlanProcedure = "/ShoppingListService/GetCurrentPlan"
	// ShoppingListServiceGetPlanProcedure is the fully-qualified name of the ShoppingListService's
	// GetPlan RPC.
	ShoppingListServiceGetPlanProcedure = "/ShoppingListService/GetPlan"
	// ShoppingListServiceUpdatePlanProcedure is the fully-qualified name of the ShoppingListService's
	// UpdatePlan RPC.
	ShoppingListServiceUpdatePlanProcedure = "/ShoppingListService/UpdatePlan"
	// ShoppingListServiceMarkPlanAsCurrentProcedure is the fully-qualified name of the
	// ShoppingListService's MarkPlanAsCurrent RPC.
	ShoppingListServiceMarkPlanAsCurrentProcedure = "/ShoppingListService/MarkPlanAsCurrent"
	// ShoppingListServiceGetMealsProcedure is the fully-qualified name of the ShoppingListService's
	// GetMeals RPC.
	ShoppingListServiceGetMealsProcedure = "/ShoppingListService/GetMeals"
	// ShoppingListServiceCreateMealProcedure is the fully-qualified name of the ShoppingListService's
	// CreateMeal RPC.
	ShoppingListServiceCreateMealProcedure = "/ShoppingListService/CreateMeal"
	// ShoppingListServiceUpdateMealProcedure is the fully-qualified name of the ShoppingListService's
	// UpdateMeal RPC.
	ShoppingListServiceUpdateMealProcedure = "/ShoppingListService/UpdateMeal"
	// ShoppingListServiceDeleteMealProcedure is the fully-qualified name of the ShoppingListService's
	// DeleteMeal RPC.
	ShoppingListServiceDeleteMealProcedure = "/ShoppingListService/DeleteMeal"
	// ShoppingListServiceGetIngredientsProcedure is the fully-qualified name of the
	// ShoppingListService's GetIngredients RPC.
	ShoppingListServiceGetIngredientsProcedure = "/ShoppingListService/GetIngredients"
	// ShoppingListServiceCreateIngredientProcedure is the fully-qualified name of the
	// ShoppingListService's CreateIngredient RPC.
	ShoppingListServiceCreateIngredientProcedure = "/ShoppingListService/CreateIngredient"
	// ShoppingListServiceUpdateIngredientProcedure is the fully-qualified name of the
	// ShoppingListService's UpdateIngredient RPC.
	ShoppingListServiceUpdateIngredientProcedure = "/ShoppingListService/UpdateIngredient"
	// ShoppingListServiceDeleteIngredientProcedure is the fully-qualified name of the
	// ShoppingListService's DeleteIngredient RPC.
	ShoppingListServiceDeleteIngredientProcedure = "/ShoppingListService/DeleteIngredient"
)

// ShoppingListServiceClient is a client for the ShoppingListService service.
type ShoppingListServiceClient interface {
	// plan
	GetCurrentPlan(context.Context, *connect.Request[gen.GetCurrentPlanRequest]) (*connect.Response[gen.GetCurrentPlanResponse], error)
	GetPlan(context.Context, *connect.Request[gen.GetPlanRequest]) (*connect.Response[gen.GetPlanResponse], error)
	UpdatePlan(context.Context, *connect.Request[gen.UpdatePlanRequest]) (*connect.Response[gen.UpdatePlanResponse], error)
	MarkPlanAsCurrent(context.Context, *connect.Request[gen.MarkPlanAsCurrentRequest]) (*connect.Response[gen.MarkPlanAsCurrentResponse], error)
	// meals
	GetMeals(context.Context, *connect.Request[gen.GetMealsRequest]) (*connect.Response[gen.GetMealsResponse], error)
	CreateMeal(context.Context, *connect.Request[gen.CreateMealRequest]) (*connect.Response[gen.CreateMealResponse], error)
	UpdateMeal(context.Context, *connect.Request[gen.UpdateMealRequest]) (*connect.Response[gen.UpdateMealResponse], error)
	DeleteMeal(context.Context, *connect.Request[gen.DeleteMealRequest]) (*connect.Response[gen.DeleteMealResponse], error)
	GetIngredients(context.Context, *connect.Request[gen.GetIngredientsRequest]) (*connect.Response[gen.GetIngredientsResponse], error)
	CreateIngredient(context.Context, *connect.Request[gen.CreateIngredientRequest]) (*connect.Response[gen.CreateIngredientResponse], error)
	UpdateIngredient(context.Context, *connect.Request[gen.UpdateIngredientRequest]) (*connect.Response[gen.UpdateIngredientResponse], error)
	DeleteIngredient(context.Context, *connect.Request[gen.DeleteIngredientRequest]) (*connect.Response[gen.DeleteIngredientResponse], error)
}

// NewShoppingListServiceClient constructs a client for the ShoppingListService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShoppingListServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ShoppingListServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	shoppingListServiceMethods := gen.File_shopping_list_service_proto.Services().ByName("ShoppingListService").Methods()
	return &shoppingListServiceClient{
		getCurrentPlan: connect.NewClient[gen.GetCurrentPlanRequest, gen.GetCurrentPlanResponse](
			httpClient,
			baseURL+ShoppingListServiceGetCurrentPlanProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("GetCurrentPlan")),
			connect.WithClientOptions(opts...),
		),
		getPlan: connect.NewClient[gen.GetPlanRequest, gen.GetPlanResponse](
			httpClient,
			baseURL+ShoppingListServiceGetPlanProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("GetPlan")),
			connect.WithClientOptions(opts...),
		),
		updatePlan: connect.NewClient[gen.UpdatePlanRequest, gen.UpdatePlanResponse](
			httpClient,
			baseURL+ShoppingListServiceUpdatePlanProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("UpdatePlan")),
			connect.WithClientOptions(opts...),
		),
		markPlanAsCurrent: connect.NewClient[gen.MarkPlanAsCurrentRequest, gen.MarkPlanAsCurrentResponse](
			httpClient,
			baseURL+ShoppingListServiceMarkPlanAsCurrentProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("MarkPlanAsCurrent")),
			connect.WithClientOptions(opts...),
		),
		getMeals: connect.NewClient[gen.GetMealsRequest, gen.GetMealsResponse](
			httpClient,
			baseURL+ShoppingListServiceGetMealsProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("GetMeals")),
			connect.WithClientOptions(opts...),
		),
		createMeal: connect.NewClient[gen.CreateMealRequest, gen.CreateMealResponse](
			httpClient,
			baseURL+ShoppingListServiceCreateMealProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("CreateMeal")),
			connect.WithClientOptions(opts...),
		),
		updateMeal: connect.NewClient[gen.UpdateMealRequest, gen.UpdateMealResponse](
			httpClient,
			baseURL+ShoppingListServiceUpdateMealProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("UpdateMeal")),
			connect.WithClientOptions(opts...),
		),
		deleteMeal: connect.NewClient[gen.DeleteMealRequest, gen.DeleteMealResponse](
			httpClient,
			baseURL+ShoppingListServiceDeleteMealProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("DeleteMeal")),
			connect.WithClientOptions(opts...),
		),
		getIngredients: connect.NewClient[gen.GetIngredientsRequest, gen.GetIngredientsResponse](
			httpClient,
			baseURL+ShoppingListServiceGetIngredientsProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("GetIngredients")),
			connect.WithClientOptions(opts...),
		),
		createIngredient: connect.NewClient[gen.CreateIngredientRequest, gen.CreateIngredientResponse](
			httpClient,
			baseURL+ShoppingListServiceCreateIngredientProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("CreateIngredient")),
			connect.WithClientOptions(opts...),
		),
		updateIngredient: connect.NewClient[gen.UpdateIngredientRequest, gen.UpdateIngredientResponse](
			httpClient,
			baseURL+ShoppingListServiceUpdateIngredientProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("UpdateIngredient")),
			connect.WithClientOptions(opts...),
		),
		deleteIngredient: connect.NewClient[gen.DeleteIngredientRequest, gen.DeleteIngredientResponse](
			httpClient,
			baseURL+ShoppingListServiceDeleteIngredientProcedure,
			connect.WithSchema(shoppingListServiceMethods.ByName("DeleteIngredient")),
			connect.WithClientOptions(opts...),
		),
	}
}

// shoppingListServiceClient implements ShoppingListServiceClient.
type shoppingListServiceClient struct {
	getCurrentPlan    *connect.Client[gen.GetCurrentPlanRequest, gen.GetCurrentPlanResponse]
	getPlan           *connect.Client[gen.GetPlanRequest, gen.GetPlanResponse]
	updatePlan        *connect.Client[gen.UpdatePlanRequest, gen.UpdatePlanResponse]
	markPlanAsCurrent *connect.Client[gen.MarkPlanAsCurrentRequest, gen.MarkPlanAsCurrentResponse]
	getMeals          *connect.Client[gen.GetMealsRequest, gen.GetMealsResponse]
	createMeal        *connect.Client[gen.CreateMealRequest, gen.CreateMealResponse]
	updateMeal        *connect.Client[gen.UpdateMealRequest, gen.UpdateMealResponse]
	deleteMeal        *connect.Client[gen.DeleteMealRequest, gen.DeleteMealResponse]
	getIngredients    *connect.Client[gen.GetIngredientsRequest, gen.GetIngredientsResponse]
	createIngredient  *connect.Client[gen.CreateIngredientRequest, gen.CreateIngredientResponse]
	updateIngredient  *connect.Client[gen.UpdateIngredientRequest, gen.UpdateIngredientResponse]
	deleteIngredient  *connect.Client[gen.DeleteIngredientRequest, gen.DeleteIngredientResponse]
}

// GetCurrentPlan calls ShoppingListService.GetCurrentPlan.
func (c *shoppingListServiceClient) GetCurrentPlan(ctx context.Context, req *connect.Request[gen.GetCurrentPlanRequest]) (*connect.Response[gen.GetCurrentPlanResponse], error) {
	return c.getCurrentPlan.CallUnary(ctx, req)
}

// GetPlan calls ShoppingListService.GetPlan.
func (c *shoppingListServiceClient) GetPlan(ctx context.Context, req *connect.Request[gen.GetPlanRequest]) (*connect.Response[gen.GetPlanResponse], error) {
	return c.getPlan.CallUnary(ctx, req)
}

// UpdatePlan calls ShoppingListService.UpdatePlan.
func (c *shoppingListServiceClient) UpdatePlan(ctx context.Context, req *connect.Request[gen.UpdatePlanRequest]) (*connect.Response[gen.UpdatePlanResponse], error) {
	return c.updatePlan.CallUnary(ctx, req)
}

// MarkPlanAsCurrent calls ShoppingListService.MarkPlanAsCurrent.
func (c *shoppingListServiceClient) MarkPlanAsCurrent(ctx context.Context, req *connect.Request[gen.MarkPlanAsCurrentRequest]) (*connect.Response[gen.MarkPlanAsCurrentResponse], error) {
	return c.markPlanAsCurrent.CallUnary(ctx, req)
}

// GetMeals calls ShoppingListService.GetMeals.
func (c *shoppingListServiceClient) GetMeals(ctx context.Context, req *connect.Request[gen.GetMealsRequest]) (*connect.Response[gen.GetMealsResponse], error) {
	return c.getMeals.CallUnary(ctx, req)
}

// CreateMeal calls ShoppingListService.CreateMeal.
func (c *shoppingListServiceClient) CreateMeal(ctx context.Context, req *connect.Request[gen.CreateMealRequest]) (*connect.Response[gen.CreateMealResponse], error) {
	return c.createMeal.CallUnary(ctx, req)
}

// UpdateMeal calls ShoppingListService.UpdateMeal.
func (c *shoppingListServiceClient) UpdateMeal(ctx context.Context, req *connect.Request[gen.UpdateMealRequest]) (*connect.Response[gen.UpdateMealResponse], error) {
	return c.updateMeal.CallUnary(ctx, req)
}

// DeleteMeal calls ShoppingListService.DeleteMeal.
func (c *shoppingListServiceClient) DeleteMeal(ctx context.Context, req *connect.Request[gen.DeleteMealRequest]) (*connect.Response[gen.DeleteMealResponse], error) {
	return c.deleteMeal.CallUnary(ctx, req)
}

// GetIngredients calls ShoppingListService.GetIngredients.
func (c *shoppingListServiceClient) GetIngredients(ctx context.Context, req *connect.Request[gen.GetIngredientsRequest]) (*connect.Response[gen.GetIngredientsResponse], error) {
	return c.getIngredients.CallUnary(ctx, req)
}

// CreateIngredient calls ShoppingListService.CreateIngredient.
func (c *shoppingListServiceClient) CreateIngredient(ctx context.Context, req *connect.Request[gen.CreateIngredientRequest]) (*connect.Response[gen.CreateIngredientResponse], error) {
	return c.createIngredient.CallUnary(ctx, req)
}

// UpdateIngredient calls ShoppingListService.UpdateIngredient.
func (c *shoppingListServiceClient) UpdateIngredient(ctx context.Context, req *connect.Request[gen.UpdateIngredientRequest]) (*connect.Response[gen.UpdateIngredientResponse], error) {
	return c.updateIngredient.CallUnary(ctx, req)
}

// DeleteIngredient calls ShoppingListService.DeleteIngredient.
func (c *shoppingListServiceClient) DeleteIngredient(ctx context.Context, req *connect.Request[gen.DeleteIngredientRequest]) (*connect.Response[gen.DeleteIngredientResponse], error) {
	return c.deleteIngredient.CallUnary(ctx, req)
}

// ShoppingListServiceHandler is an implementation of the ShoppingListService service.
type ShoppingListServiceHandler interface {
	// plan
	GetCurrentPlan(context.Context, *connect.Request[gen.GetCurrentPlanRequest]) (*connect.Response[gen.GetCurrentPlanResponse], error)
	GetPlan(context.Context, *connect.Request[gen.GetPlanRequest]) (*connect.Response[gen.GetPlanResponse], error)
	UpdatePlan(context.Context, *connect.Request[gen.UpdatePlanRequest]) (*connect.Response[gen.UpdatePlanResponse], error)
	MarkPlanAsCurrent(context.Context, *connect.Request[gen.MarkPlanAsCurrentRequest]) (*connect.Response[gen.MarkPlanAsCurrentResponse], error)
	// meals
	GetMeals(context.Context, *connect.Request[gen.GetMealsRequest]) (*connect.Response[gen.GetMealsResponse], error)
	CreateMeal(context.Context, *connect.Request[gen.CreateMealRequest]) (*connect.Response[gen.CreateMealResponse], error)
	UpdateMeal(context.Context, *connect.Request[gen.UpdateMealRequest]) (*connect.Response[gen.UpdateMealResponse], error)
	DeleteMeal(context.Context, *connect.Request[gen.DeleteMealRequest]) (*connect.Response[gen.DeleteMealResponse], error)
	GetIngredients(context.Context, *connect.Request[gen.GetIngredientsRequest]) (*connect.Response[gen.GetIngredientsResponse], error)
	CreateIngredient(context.Context, *connect.Request[gen.CreateIngredientRequest]) (*connect.Response[gen.CreateIngredientResponse], error)
	UpdateIngredient(context.Context, *connect.Request[gen.UpdateIngredientRequest]) (*connect.Response[gen.UpdateIngredientResponse], error)
	DeleteIngredient(context.Context, *connect.Request[gen.DeleteIngredientRequest]) (*connect.Response[gen.DeleteIngredientResponse], error)
}

// NewShoppingListServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShoppingListServiceHandler(svc ShoppingListServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	shoppingListServiceMethods := gen.File_shopping_list_service_proto.Services().ByName("ShoppingListService").Methods()
	shoppingListServiceGetCurrentPlanHandler := connect.NewUnaryHandler(
		ShoppingListServiceGetCurrentPlanProcedure,
		svc.GetCurrentPlan,
		connect.WithSchema(shoppingListServiceMethods.ByName("GetCurrentPlan")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceGetPlanHandler := connect.NewUnaryHandler(
		ShoppingListServiceGetPlanProcedure,
		svc.GetPlan,
		connect.WithSchema(shoppingListServiceMethods.ByName("GetPlan")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceUpdatePlanHandler := connect.NewUnaryHandler(
		ShoppingListServiceUpdatePlanProcedure,
		svc.UpdatePlan,
		connect.WithSchema(shoppingListServiceMethods.ByName("UpdatePlan")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceMarkPlanAsCurrentHandler := connect.NewUnaryHandler(
		ShoppingListServiceMarkPlanAsCurrentProcedure,
		svc.MarkPlanAsCurrent,
		connect.WithSchema(shoppingListServiceMethods.ByName("MarkPlanAsCurrent")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceGetMealsHandler := connect.NewUnaryHandler(
		ShoppingListServiceGetMealsProcedure,
		svc.GetMeals,
		connect.WithSchema(shoppingListServiceMethods.ByName("GetMeals")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceCreateMealHandler := connect.NewUnaryHandler(
		ShoppingListServiceCreateMealProcedure,
		svc.CreateMeal,
		connect.WithSchema(shoppingListServiceMethods.ByName("CreateMeal")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceUpdateMealHandler := connect.NewUnaryHandler(
		ShoppingListServiceUpdateMealProcedure,
		svc.UpdateMeal,
		connect.WithSchema(shoppingListServiceMethods.ByName("UpdateMeal")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceDeleteMealHandler := connect.NewUnaryHandler(
		ShoppingListServiceDeleteMealProcedure,
		svc.DeleteMeal,
		connect.WithSchema(shoppingListServiceMethods.ByName("DeleteMeal")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceGetIngredientsHandler := connect.NewUnaryHandler(
		ShoppingListServiceGetIngredientsProcedure,
		svc.GetIngredients,
		connect.WithSchema(shoppingListServiceMethods.ByName("GetIngredients")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceCreateIngredientHandler := connect.NewUnaryHandler(
		ShoppingListServiceCreateIngredientProcedure,
		svc.CreateIngredient,
		connect.WithSchema(shoppingListServiceMethods.ByName("CreateIngredient")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceUpdateIngredientHandler := connect.NewUnaryHandler(
		ShoppingListServiceUpdateIngredientProcedure,
		svc.UpdateIngredient,
		connect.WithSchema(shoppingListServiceMethods.ByName("UpdateIngredient")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingListServiceDeleteIngredientHandler := connect.NewUnaryHandler(
		ShoppingListServiceDeleteIngredientProcedure,
		svc.DeleteIngredient,
		connect.WithSchema(shoppingListServiceMethods.ByName("DeleteIngredient")),
		connect.WithHandlerOptions(opts...),
	)
	return "/ShoppingListService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShoppingListServiceGetCurrentPlanProcedure:
			shoppingListServiceGetCurrentPlanHandler.ServeHTTP(w, r)
		case ShoppingListServiceGetPlanProcedure:
			shoppingListServiceGetPlanHandler.ServeHTTP(w, r)
		case ShoppingListServiceUpdatePlanProcedure:
			shoppingListServiceUpdatePlanHandler.ServeHTTP(w, r)
		case ShoppingListServiceMarkPlanAsCurrentProcedure:
			shoppingListServiceMarkPlanAsCurrentHandler.ServeHTTP(w, r)
		case ShoppingListServiceGetMealsProcedure:
			shoppingListServiceGetMealsHandler.ServeHTTP(w, r)
		case ShoppingListServiceCreateMealProcedure:
			shoppingListServiceCreateMealHandler.ServeHTTP(w, r)
		case ShoppingListServiceUpdateMealProcedure:
			shoppingListServiceUpdateMealHandler.ServeHTTP(w, r)
		case ShoppingListServiceDeleteMealProcedure:
			shoppingListServiceDeleteMealHandler.ServeHTTP(w, r)
		case ShoppingListServiceGetIngredientsProcedure:
			shoppingListServiceGetIngredientsHandler.ServeHTTP(w, r)
		case ShoppingListServiceCreateIngredientProcedure:
			shoppingListServiceCreateIngredientHandler.ServeHTTP(w, r)
		case ShoppingListServiceUpdateIngredientProcedure:
			shoppingListServiceUpdateIngredientHandler.ServeHTTP(w, r)
		case ShoppingListServiceDeleteIngredientProcedure:
			shoppingListServiceDeleteIngredientHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShoppingListServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShoppingListServiceHandler struct{}

func (UnimplementedShoppingListServiceHandler) GetCurrentPlan(context.Context, *connect.Request[gen.GetCurrentPlanRequest]) (*connect.Response[gen.GetCurrentPlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.GetCurrentPlan is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) GetPlan(context.Context, *connect.Request[gen.GetPlanRequest]) (*connect.Response[gen.GetPlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.GetPlan is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) UpdatePlan(context.Context, *connect.Request[gen.UpdatePlanRequest]) (*connect.Response[gen.UpdatePlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.UpdatePlan is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) MarkPlanAsCurrent(context.Context, *connect.Request[gen.MarkPlanAsCurrentRequest]) (*connect.Response[gen.MarkPlanAsCurrentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.MarkPlanAsCurrent is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) GetMeals(context.Context, *connect.Request[gen.GetMealsRequest]) (*connect.Response[gen.GetMealsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.GetMeals is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) CreateMeal(context.Context, *connect.Request[gen.CreateMealRequest]) (*connect.Response[gen.CreateMealResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.CreateMeal is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) UpdateMeal(context.Context, *connect.Request[gen.UpdateMealRequest]) (*connect.Response[gen.UpdateMealResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.UpdateMeal is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) DeleteMeal(context.Context, *connect.Request[gen.DeleteMealRequest]) (*connect.Response[gen.DeleteMealResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.DeleteMeal is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) GetIngredients(context.Context, *connect.Request[gen.GetIngredientsRequest]) (*connect.Response[gen.GetIngredientsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.GetIngredients is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) CreateIngredient(context.Context, *connect.Request[gen.CreateIngredientRequest]) (*connect.Response[gen.CreateIngredientResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.CreateIngredient is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) UpdateIngredient(context.Context, *connect.Request[gen.UpdateIngredientRequest]) (*connect.Response[gen.UpdateIngredientResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.UpdateIngredient is not implemented"))
}

func (UnimplementedShoppingListServiceHandler) DeleteIngredient(context.Context, *connect.Request[gen.DeleteIngredientRequest]) (*connect.Response[gen.DeleteIngredientResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ShoppingListService.DeleteIngredient is not implemented"))
}
