// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package generated

import (
	"context"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients (name) VALUES (?) RETURNING id
`

func (q *Queries) CreateIngredient(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createMeal = `-- name: CreateMeal :one
INSERT INTO meals (name, ingredients, recipe_url) VALUES (?, ?, ?) RETURNING id
`

type CreateMealParams struct {
	Name        string
	Ingredients string
	RecipeUrl   string
}

func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createMeal, arg.Name, arg.Ingredients, arg.RecipeUrl)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createPlan = `-- name: CreatePlan :exec
INSERT INTO plan (plan_data) VALUES (?)
`

func (q *Queries) CreatePlan(ctx context.Context, planData interface{}) error {
	_, err := q.db.ExecContext(ctx, createPlan, planData)
	return err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM ingredients WHERE id = ?
`

func (q *Queries) DeleteIngredient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngredient, id)
	return err
}

const deleteMeal = `-- name: DeleteMeal :exec
DELETE FROM meals WHERE id = ?
`

func (q *Queries) DeleteMeal(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMeal, id)
	return err
}

const getCurrentPlan = `-- name: GetCurrentPlan :many

SELECT id FROM plan WHERE current_plan = true
`

// ----- PLAN --------
func (q *Queries) GetCurrentPlan(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getCurrentPlan)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngredients = `-- name: GetIngredients :many

SELECT id, name FROM ingredients
ORDER BY name
`

// ----- INGREDIENTS ------
func (q *Queries) GetIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMeals = `-- name: GetMeals :many

SELECT id, name, ingredients, recipe_url FROM meals
ORDER BY name
`

type GetMealsRow struct {
	ID          int64
	Name        string
	Ingredients string
	RecipeUrl   string
}

// ----- MEALS ------
func (q *Queries) GetMeals(ctx context.Context) ([]GetMealsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMeals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMealsRow
	for rows.Next() {
		var i GetMealsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ingredients,
			&i.RecipeUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlan = `-- name: GetPlan :one
SELECT id, current_plan, plan_data, prev_id FROM plan WHERE id = ?
`

func (q *Queries) GetPlan(ctx context.Context, id int64) (Plan, error) {
	row := q.db.QueryRowContext(ctx, getPlan, id)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.CurrentPlan,
		&i.PlanData,
		&i.PrevID,
	)
	return i, err
}

const markPlanAsCurrent = `-- name: MarkPlanAsCurrent :exec
UPDATE plan SET curent_plan = true WHERE id = ?
`

func (q *Queries) MarkPlanAsCurrent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markPlanAsCurrent, id)
	return err
}

const unmarkPlansAsCurrent = `-- name: UnmarkPlansAsCurrent :exec
UPDATE plan SET current_plan = false
`

func (q *Queries) UnmarkPlansAsCurrent(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, unmarkPlansAsCurrent)
	return err
}

const updateIngredient = `-- name: UpdateIngredient :exec
UPDATE ingredients set name = ? WHERE id = ?
`

type UpdateIngredientParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) error {
	_, err := q.db.ExecContext(ctx, updateIngredient, arg.Name, arg.ID)
	return err
}

const updateMeal = `-- name: UpdateMeal :exec
UPDATE meals set name = ?, ingredients = ?, recipe_url = ? WHERE id = ?
`

type UpdateMealParams struct {
	Name        string
	Ingredients string
	RecipeUrl   string
	ID          int64
}

func (q *Queries) UpdateMeal(ctx context.Context, arg UpdateMealParams) error {
	_, err := q.db.ExecContext(ctx, updateMeal,
		arg.Name,
		arg.Ingredients,
		arg.RecipeUrl,
		arg.ID,
	)
	return err
}

const updatePlan = `-- name: UpdatePlan :exec
UPDATE plan set plan_data = ? WHERE id = ?
`

type UpdatePlanParams struct {
	PlanData interface{}
	ID       int64
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) error {
	_, err := q.db.ExecContext(ctx, updatePlan, arg.PlanData, arg.ID)
	return err
}
